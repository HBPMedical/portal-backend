{
  "name": "yadda",
  "version": "0.15.5",
  "description": "A true BDD framework for JavaScript",
  "main": "./lib/index.js",
  "devDependencies": {
    "mocha": "*",
    "browserify": "10.2.6",
    "jshint": "^2.5.0"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "NODE_ENV=test mocha --recursive --reporter spec test",
    "istanbul": "NODE_ENV=test istanbul cover _mocha -- -u exports --reporter spec",
    "examples": "node bin/examples.js",
    "browserify": "node bin/browserify.js",
    "jshint": "find . -name *.js | grep -vE '/node_modules/|/dist/|/components/|/component-browser/build/|/coverage/|qunit-1.10.0.js' | xargs ./node_modules/.bin/jshint"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/acuminous/yadda.git"
  },
  "keywords": [
    "BDD",
    "Specification",
    "Natural",
    "Test",
    "Behaviour",
    "Driven",
    "Jasmine",
    "Mocha",
    "QUnit",
    "Nodeunit"
  ],
  "author": {
    "name": "Stephen Cresswell"
  },
  "license": "Apache2",
  "readmeFilename": "README.md",
  "gitHead": "4754e8449c4f6d28e6357059287079a44a0dad29",
  "readme": "# Yadda\n[![Build Status](https://travis-ci.org/acuminous/yadda.png)](https://travis-ci.org/acuminous/yadda) [![Dependencies](https://david-dm.org/acuminous/yadda.svg)](https://david-dm.org/acuminous/yadda)\n\n[![NPM](https://nodei.co/npm/yadda.png?downloads=true)](https://nodei.co/npm/yadda/)\n\nYadda brings _true_ BDD to JavaScript frameworks such as [Jasmine](http://pivotal.github.io/jasmine/), [Mocha](http://visionmedia.github.io/mocha/), [QUnit](http://qunitjs.com), [Nodeunit](https://github.com/caolan/nodeunit), [WebdriverIO](http://webdriver.io/) and [CasperJS](http://casperjs.org). By _true_ BDD we mean that the ordinary language (e.g. English) steps are mapped to code, as opposed to simply decorating it. This is important because just like comments, the decorative steps such as those used by\n[Jasmine](http://pivotal.github.com/jasmine), [Mocha](http://visionmedia.github.io/mocha) and [Vows](http://vowsjs.org) can fall out of date and are a form of duplication.\n\nYadda's BDD implementation is like [Cucumber's](http://cukes.info/) in that it maps the ordinary language steps to code. Not only are the steps less likely to go stale, but they also provide a valuable abstraction layer and encourage re-use. You could of course just use [CucumberJS](https://github.com/cucumber/cucumber-js), but we find Yadda less invasive and prefer it's flexible syntax to Gherkin's. Yadda's conflict resolution is smarter too.\n\n## Latest Version\nThe current version of Yadda is 0.15.5</br>\n**Breaking changes were introduce in versions 0.15.0 and 0.13.0.**</br>\nPlease refer to the [Release Notes](./release-notes.md) for more details\n\n## Documentation\nPlease refer to the the [Yadda User Guide](http://acuminous.gitbooks.io/yadda-user-guide).\n\n## tl;dr\n\n### Step 1 - Decide upon a directory structure, e.g.\n```\n.\n├── bottles-test.js\n├── lib\n│    └── wall.js\n└── test\n    ├── features\n    │   └── bottles.feature\n    └── steps\n        └── bottles-library.js\n```\n\n### Step 2 - Write your first scenario\n./test/features/bottles.feature\n```\nFeature: 100 Green Bottles\n\nScenario: Should fall from the wall\n\n   Given 100 green bottles are standing on the wall\n   When 1 green bottle accidentally falls\n   Then there are 99 green bottles standing on the wall\n\n```\n### Step 3 - Implement the step library\n./test/steps/bottles-library.js\n```js\nvar assert = require('assert');\nvar English = require('yadda').localisation.English;\nvar Wall = require('../../lib/wall'); // The library that you wish to test\n\nmodule.exports = (function() {\n  return English.library()\n    .given(\"$NUM green bottles are standing on the wall\", function(number, next) {\n       wall = new Wall(number);\n       next();\n    })\n    .when(\"$NUM green bottle accidentally falls\", function(number, next) {\n       wall.fall(number);\n       next();\n    })\n    .then(\"there are $NUM green bottles standing on the wall\", function(number, next) {\n       assert.equal(number, wall.bottles);\n       next();\n    });\n})();\n```\n(If your test runner & code are synchronous you can omit the calls to 'next')\n\n### Step 4 - Integrate Yadda with your testing framework (e.g. Mocha)\n./bottles-test.js\n```js\nvar Yadda = require('yadda');\nYadda.plugins.mocha.StepLevelPlugin.init();\n\nnew Yadda.FeatureFileSearch('./test/features').each(function(file) {\n\n  featureFile(file, function(feature) {\n\n    var library = require('./test/steps/bottles-library');\n    var yadda = Yadda.createInstance(library);\n\n    scenarios(feature.scenarios, function(scenario) {\n      steps(scenario.steps, function(step, done) {\n        yadda.run(step, done);\n      });\n    });\n  });\n});\n```\n### Step 5 - Write your code\n./lib/wall.js\n```js\nmodule.exports = function(bottles) {\n  this.bottles = bottles;\n  this.fall = function(n) {\n    this.bottles -= n;\n  }\n};\n```\n### Step 6 - Run your tests\n```\n  mocha --reporter spec bottles-test.js\n\n  100 Green Bottles\n    Should fall from the wall\n      ✓ Given 100 green bottles are standing on the wall\n      ✓ When 1 green bottle accidentally falls\n      ✓ Then there are 99 green bottles standing on the wall\n```\n",
  "bugs": {
    "url": "https://github.com/acuminous/yadda/issues"
  },
  "homepage": "https://github.com/acuminous/yadda",
  "_id": "yadda@0.15.5",
  "_from": "yadda@^0.15.2"
}
